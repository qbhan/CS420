
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVrightUMINUSADDRESS COLON COMMA DIV DOUBLEQUOTE ELSE ELSE_IF EQ EQUAL FLOAT FNUM FOR GT ID IF INCREMENT INT INUM LBRACE LBRACKET LITERAL LPAREN LT MAIN MINUS NEQ PERIOD PLUS POINTER PRINT QUOTE RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOIDprogram : declaration_listdeclaration_list : declaration_list func_declarationdeclaration_list : declaration_list declaration SEMICOLONdeclaration_list : emptyfunc_declaration : type ID LPAREN params RPAREN stmt_blockfunc_declaration : type ID LPAREN RPAREN stmt_blockfunc_declaration : type TIMES ID LPAREN params RPAREN stmt_blockfunc_declaration : type TIMES ID LPAREN RPAREN stmt_blockfunc_declaration : type MAIN LPAREN params RPAREN stmt_blockfunc_declaration : type MAIN LPAREN RPAREN stmt_blockparams : VOIDparams : param_listparam_list : paramparam_list : param_list COMMA paramparam : type IDparam : type TIMES IDgenstmt : mstmt\n                | umstmtmstmt : IF LPAREN expr RPAREN mstmt ELSE mstmt\n                | stmtumstmt : IF LPAREN expr RPAREN genstmt\n                | IF LPAREN expr RPAREN mstmt ELSE umstmtstmt : expr SEMICOLON\n            | declaration SEMICOLON\n            | stmt_block\n            | stmt_forloop\n            | stmt_return\n            | SEMICOLONstmt : expr errorstmt : PRINT LPAREN argument_list RPAREN SEMICOLONdeclaration : declaration COMMA idbracketdeclaration : declaration COMMA TIMES idbracketdeclaration : type idbracketdeclaration : type TIMES idbracketidbracket : IDidbracket : ID LBRACKET INUM RBRACKETtype : INT\n            | FLOAT\n            | VOIDstmt_block : LBRACE stmt_list RBRACEstmt_list : stmt_list genstmtstmt_list : emptystmt_forloop : FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmtstmt_return : RETURN expr SEMICOLONstmt_return : RETURN SEMICOLONexpr : ID EQUAL exprexpr : ID LBRACKET arith_expr RBRACKET EQUAL exprexpr : TIMES ID EQUAL exprexpr : incr_exprexpr : basic_exprbasic_expr : basic_expr compare arith_exprbasic_expr : arith_exprcompare : EQ\n               | NEQ\n               | GT\n               | LTincr_expr : ID INCREMENTincr_expr : INCREMENT IDarith_expr : MINUS arith_expr %prec UMINUSarith_expr : LPAREN arith_expr RPARENarith_expr : arith_expr PLUS arith_exprarith_expr : arith_expr MINUS arith_exprarith_expr : arith_expr TIMES arith_exprarith_expr : arith_expr DIV arith_exprarith_expr : IDarith_expr : FNUMarith_expr : INUMarith_expr : TIMES IDarith_expr : TIMES LPAREN arith_expr RPARENarith_expr : TIMES ID LPAREN argument_list RPARENarith_expr : ADDRESS IDarith_expr : ID LBRACKET arith_expr RBRACKETarith_expr : TIMES ID LBRACKET arith_expr RBRACKETarith_expr : ID LPAREN argument_list RPARENargument_list : argumentargument_list : argument_list COMMA argumentargument : emptyargument : arith_exprargument : LITERALargument : errorempty :'
    
_lr_action_items = {'INT':([0,2,3,4,10,19,23,32,38,39,40,45,47,48,49,52,53,54,55,56,57,61,62,64,65,66,81,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,7,-4,-2,-3,7,7,7,-6,-81,7,-10,-5,7,-42,-8,-9,-40,-41,-17,-18,-20,-28,-25,-26,-27,-7,-23,-29,-24,-45,-44,7,-17,-21,-30,7,-19,-22,7,-43,]),'FLOAT':([0,2,3,4,10,19,23,32,38,39,40,45,47,48,49,52,53,54,55,56,57,61,62,64,65,66,81,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,8,-4,-2,-3,8,8,8,-6,-81,8,-10,-5,8,-42,-8,-9,-40,-41,-17,-18,-20,-28,-25,-26,-27,-7,-23,-29,-24,-45,-44,8,-17,-21,-30,8,-19,-22,8,-43,]),'VOID':([0,2,3,4,10,19,23,32,38,39,40,45,47,48,49,52,53,54,55,56,57,61,62,64,65,66,81,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,9,-4,-2,-3,28,28,28,-6,-81,9,-10,-5,9,-42,-8,-9,-40,-41,-17,-18,-20,-28,-25,-26,-27,-7,-23,-29,-24,-45,-44,9,-17,-21,-30,9,-19,-22,9,-43,]),'$end':([0,1,2,3,4,10,38,45,47,52,53,54,81,],[-81,0,-1,-4,-2,-3,-6,-10,-5,-8,-9,-40,-7,]),'SEMICOLON':([5,12,15,16,18,21,22,24,39,41,48,49,54,55,56,57,60,61,62,63,64,65,66,68,69,71,72,75,78,79,85,86,87,88,92,98,107,108,109,110,111,113,114,122,125,126,127,128,133,134,135,136,138,140,141,142,145,147,148,149,150,153,154,155,156,157,159,160,162,163,],[10,-35,-33,-31,-35,-35,-34,-32,-81,-36,62,-42,-40,-41,-17,-18,86,-20,-28,88,-25,-26,-27,-65,-52,-49,-50,108,-66,-67,-65,-23,-29,-24,-57,-68,135,-45,-58,-59,-71,-60,-68,-46,-61,-62,-63,-64,-51,146,-44,62,150,-72,-74,-48,-69,-17,-21,-72,-30,-70,-73,158,62,-47,-19,-22,62,-43,]),'COMMA':([5,12,15,16,18,21,22,24,29,30,35,41,46,50,63,78,79,85,89,93,110,111,113,114,116,117,118,119,120,121,124,125,126,127,128,130,139,141,143,145,149,151,153,154,],[11,-35,-33,-31,-35,-35,-34,-32,40,-13,-15,-36,-16,-14,11,-66,-67,-65,-81,-81,-59,-71,-60,-68,139,-75,-77,-78,-79,-80,139,-61,-62,-63,-64,-81,-81,-74,139,-69,-72,-76,-70,-73,]),'ID':([6,7,8,9,11,13,17,25,28,36,39,48,49,54,55,56,57,59,61,62,64,65,66,70,73,75,76,77,80,82,84,86,87,88,89,90,91,93,94,95,96,97,99,100,101,102,103,104,105,106,108,115,129,130,131,135,136,139,146,147,148,150,152,156,158,159,160,162,163,],[12,-37,-38,-39,18,21,18,35,-39,46,-81,68,-42,-40,-41,-17,-18,85,-20,-28,-25,-26,-27,98,18,68,109,85,111,68,114,-23,-29,-24,85,68,85,85,85,85,85,85,85,85,-53,-54,-55,-56,18,68,-45,85,68,85,85,-44,68,85,68,-17,-21,-30,68,68,68,-19,-22,68,-43,]),'TIMES':([6,7,8,9,11,25,28,39,48,49,54,55,56,57,59,61,62,64,65,66,68,69,73,75,77,78,79,82,83,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,106,108,110,111,113,114,115,119,123,125,126,127,128,129,130,131,132,133,135,136,137,139,140,141,144,145,146,147,148,149,150,152,153,154,156,158,159,160,162,163,],[13,-37,-38,-39,17,36,-39,-81,70,-42,-40,-41,-17,-18,84,-20,-28,-25,-26,-27,-65,96,105,70,84,-66,-67,70,96,-65,-23,-29,-24,84,70,84,84,84,84,84,84,-68,84,84,-53,-54,-55,-56,70,-45,-59,-71,-60,-68,84,96,96,96,96,-63,-64,70,84,84,96,96,-44,70,96,84,-72,-74,96,-69,70,-17,-21,-72,-30,70,-70,-73,70,70,-19,-22,70,-43,]),'MAIN':([6,7,8,9,],[14,-37,-38,-39,]),'LPAREN':([12,14,21,39,48,49,54,55,56,57,58,59,61,62,64,65,66,67,68,70,74,75,77,82,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,106,108,114,115,129,130,131,135,136,139,146,147,148,150,152,156,158,159,160,162,163,],[19,23,32,-81,59,-42,-40,-41,-17,-18,82,59,-20,-28,-25,-26,-27,89,93,99,106,59,59,59,99,93,-23,-29,-24,59,59,59,59,59,59,59,59,130,59,59,-53,-54,-55,-56,59,-45,130,59,59,59,59,-44,59,59,59,-17,-21,-30,59,59,59,-19,-22,59,-43,]),'LBRACKET':([12,18,21,68,85,98,114,],[20,20,20,91,115,131,131,]),'RPAREN':([19,23,26,28,29,30,32,33,35,42,46,50,68,69,71,72,78,79,83,85,89,92,93,98,109,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,127,128,130,132,133,139,140,141,142,143,145,149,151,153,154,157,161,],[27,34,37,-11,-12,-13,43,44,-15,51,-16,-14,-65,-52,-49,-50,-66,-67,113,-65,-81,-57,-81,-68,-58,-59,-71,136,-60,-68,138,-75,-77,-78,-79,-80,-46,141,-61,-62,-63,-64,-81,145,-51,-81,-72,-74,-48,153,-69,-72,-76,-70,-73,-47,162,]),'INUM':([20,39,48,49,54,55,56,57,59,61,62,64,65,66,75,77,82,86,87,88,89,90,91,93,94,95,96,97,99,100,101,102,103,104,106,108,115,129,130,131,135,136,139,146,147,148,150,152,156,158,159,160,162,163,],[31,-81,79,-42,-40,-41,-17,-18,79,-20,-28,-25,-26,-27,79,79,79,-23,-29,-24,79,79,79,79,79,79,79,79,79,79,-53,-54,-55,-56,79,-45,79,79,79,79,-44,79,79,79,-17,-21,-30,79,79,79,-19,-22,79,-43,]),'LBRACE':([27,34,37,39,43,44,48,49,51,54,55,56,57,61,62,64,65,66,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[39,39,39,-81,39,39,39,-42,39,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,39,-17,-21,-30,39,-19,-22,39,-43,]),'RBRACKET':([31,78,79,85,110,111,113,114,123,125,126,127,128,137,141,144,145,149,153,154,],[41,-66,-67,-65,-59,-71,-60,-68,140,-61,-62,-63,-64,149,-74,154,-69,-72,-70,-73,]),'RBRACE':([39,48,49,54,55,56,57,61,62,64,65,66,86,87,88,108,135,147,148,150,159,160,163,],[-81,54,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,-17,-21,-30,-19,-22,-43,]),'IF':([39,48,49,54,55,56,57,61,62,64,65,66,86,87,88,108,135,136,147,148,150,156,159,160,163,],[-81,58,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,58,-17,-21,-30,58,-19,-22,-43,]),'PRINT':([39,48,49,54,55,56,57,61,62,64,65,66,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,67,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,67,-17,-21,-30,67,-19,-22,67,-43,]),'FOR':([39,48,49,54,55,56,57,61,62,64,65,66,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,74,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,74,-17,-21,-30,74,-19,-22,74,-43,]),'RETURN':([39,48,49,54,55,56,57,61,62,64,65,66,86,87,88,108,135,136,147,148,150,156,159,160,162,163,],[-81,75,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,75,-17,-21,-30,75,-19,-22,75,-43,]),'INCREMENT':([39,48,49,54,55,56,57,61,62,64,65,66,68,75,82,86,87,88,90,106,108,129,135,136,146,147,148,150,152,156,158,159,160,162,163,],[-81,76,-42,-40,-41,-17,-18,-20,-28,-25,-26,-27,92,76,76,-23,-29,-24,76,76,-45,76,-44,76,76,-17,-21,-30,76,76,76,-19,-22,76,-43,]),'MINUS':([39,48,49,54,55,56,57,59,61,62,64,65,66,68,69,75,77,78,79,82,83,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,106,108,110,111,113,114,115,119,123,125,126,127,128,129,130,131,132,133,135,136,137,139,140,141,144,145,146,147,148,149,150,152,153,154,156,158,159,160,162,163,],[-81,77,-42,-40,-41,-17,-18,77,-20,-28,-25,-26,-27,-65,95,77,77,-66,-67,77,95,-65,-23,-29,-24,77,77,77,77,77,77,77,77,-68,77,77,-53,-54,-55,-56,77,-45,-59,-71,-60,-68,77,95,95,-61,-62,-63,-64,77,77,77,95,95,-44,77,95,77,-72,-74,95,-69,77,-17,-21,-72,-30,77,-70,-73,77,77,-19,-22,77,-43,]),'FNUM':([39,48,49,54,55,56,57,59,61,62,64,65,66,75,77,82,86,87,88,89,90,91,93,94,95,96,97,99,100,101,102,103,104,106,108,115,129,130,131,135,136,139,146,147,148,150,152,156,158,159,160,162,163,],[-81,78,-42,-40,-41,-17,-18,78,-20,-28,-25,-26,-27,78,78,78,-23,-29,-24,78,78,78,78,78,78,78,78,78,78,-53,-54,-55,-56,78,-45,78,78,78,78,-44,78,78,78,-17,-21,-30,78,78,78,-19,-22,78,-43,]),'ADDRESS':([39,48,49,54,55,56,57,59,61,62,64,65,66,75,77,82,86,87,88,89,90,91,93,94,95,96,97,99,100,101,102,103,104,106,108,115,129,130,131,135,136,139,146,147,148,150,152,156,158,159,160,162,163,],[-81,80,-42,-40,-41,-17,-18,80,-20,-28,-25,-26,-27,80,80,80,-23,-29,-24,80,80,80,80,80,80,80,80,80,80,-53,-54,-55,-56,80,-45,80,80,80,80,-44,80,80,80,-17,-21,-30,80,80,80,-19,-22,80,-43,]),'ELSE':([54,61,62,64,65,66,86,87,88,108,135,147,150,159,163,],[-40,-20,-28,-25,-26,-27,-23,-29,-24,-45,-44,156,-30,-19,-43,]),'error':([60,68,69,71,72,78,79,85,89,92,93,98,109,110,111,113,114,122,125,126,127,128,130,133,139,140,141,142,145,149,153,154,157,],[87,-65,-52,-49,-50,-66,-67,-65,121,-57,121,-68,-58,-59,-71,-60,-68,-46,-61,-62,-63,-64,121,-51,121,-72,-74,-48,-69,-72,-70,-73,-47,]),'EQUAL':([68,98,140,],[90,129,152,]),'PLUS':([68,69,78,79,83,85,98,110,111,113,114,119,123,125,126,127,128,132,133,137,140,141,144,145,149,153,154,],[-65,94,-66,-67,94,-65,-68,-59,-71,-60,-68,94,94,-61,-62,-63,-64,94,94,94,-72,-74,94,-69,-72,-70,-73,]),'DIV':([68,69,78,79,83,85,98,110,111,113,114,119,123,125,126,127,128,132,133,137,140,141,144,145,149,153,154,],[-65,97,-66,-67,97,-65,-68,-59,-71,-60,-68,97,97,97,97,-63,-64,97,97,97,-72,-74,97,-69,-72,-70,-73,]),'EQ':([68,69,72,78,79,85,98,110,111,113,114,125,126,127,128,133,140,141,145,149,153,154,],[-65,-52,101,-66,-67,-65,-68,-59,-71,-60,-68,-61,-62,-63,-64,-51,-72,-74,-69,-72,-70,-73,]),'NEQ':([68,69,72,78,79,85,98,110,111,113,114,125,126,127,128,133,140,141,145,149,153,154,],[-65,-52,102,-66,-67,-65,-68,-59,-71,-60,-68,-61,-62,-63,-64,-51,-72,-74,-69,-72,-70,-73,]),'GT':([68,69,72,78,79,85,98,110,111,113,114,125,126,127,128,133,140,141,145,149,153,154,],[-65,-52,103,-66,-67,-65,-68,-59,-71,-60,-68,-61,-62,-63,-64,-51,-72,-74,-69,-72,-70,-73,]),'LT':([68,69,72,78,79,85,98,110,111,113,114,125,126,127,128,133,140,141,145,149,153,154,],[-65,-52,104,-66,-67,-65,-68,-59,-71,-60,-68,-61,-62,-63,-64,-51,-72,-74,-69,-72,-70,-73,]),'LITERAL':([89,93,130,139,],[120,120,120,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'empty':([0,39,89,93,130,139,],[3,49,118,118,118,118,]),'func_declaration':([2,],[4,]),'declaration':([2,48,136,156,162,],[5,63,63,63,63,]),'type':([2,19,23,32,40,48,136,156,162,],[6,25,25,25,25,73,73,73,73,]),'idbracket':([6,11,13,17,73,105,],[15,16,22,24,15,22,]),'params':([19,23,32,],[26,33,42,]),'param_list':([19,23,32,],[29,29,29,]),'param':([19,23,32,40,],[30,30,30,50,]),'stmt_block':([27,34,37,43,44,48,51,136,156,162,],[38,45,47,52,53,64,81,64,64,64,]),'stmt_list':([39,],[48,]),'genstmt':([48,136,],[55,148,]),'mstmt':([48,136,156,],[56,147,159,]),'umstmt':([48,136,156,],[57,57,160,]),'expr':([48,75,82,90,106,129,136,146,152,156,158,162,],[60,107,112,122,134,142,60,155,157,60,161,60,]),'stmt':([48,136,156,162,],[61,61,61,163,]),'stmt_forloop':([48,136,156,162,],[65,65,65,65,]),'stmt_return':([48,136,156,162,],[66,66,66,66,]),'arith_expr':([48,59,75,77,82,89,90,91,93,94,95,96,97,99,100,106,115,129,130,131,136,139,146,152,156,158,162,],[69,83,69,110,69,119,69,123,119,125,126,127,128,132,133,69,137,69,119,144,69,119,69,69,69,69,69,]),'incr_expr':([48,75,82,90,106,129,136,146,152,156,158,162,],[71,71,71,71,71,71,71,71,71,71,71,71,]),'basic_expr':([48,75,82,90,106,129,136,146,152,156,158,162,],[72,72,72,72,72,72,72,72,72,72,72,72,]),'compare':([72,],[100,]),'argument_list':([89,93,130,],[116,124,143,]),'argument':([89,93,130,139,],[117,117,117,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','pycparser.py',26),
  ('declaration_list -> declaration_list func_declaration','declaration_list',2,'p_declaration_list_1','pycparser.py',36),
  ('declaration_list -> declaration_list declaration SEMICOLON','declaration_list',3,'p_declaration_list_2','pycparser.py',43),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list_3','pycparser.py',49),
  ('func_declaration -> type ID LPAREN params RPAREN stmt_block','func_declaration',6,'p_func_declaration_1','pycparser.py',60),
  ('func_declaration -> type ID LPAREN RPAREN stmt_block','func_declaration',5,'p_func_declaration_2','pycparser.py',66),
  ('func_declaration -> type TIMES ID LPAREN params RPAREN stmt_block','func_declaration',7,'p_func_declaration_3','pycparser.py',71),
  ('func_declaration -> type TIMES ID LPAREN RPAREN stmt_block','func_declaration',6,'p_func_declaration_4','pycparser.py',77),
  ('func_declaration -> type MAIN LPAREN params RPAREN stmt_block','func_declaration',6,'p_func_declaration_5','pycparser.py',83),
  ('func_declaration -> type MAIN LPAREN RPAREN stmt_block','func_declaration',5,'p_func_declaration_6','pycparser.py',88),
  ('params -> VOID','params',1,'p_params_1','pycparser.py',97),
  ('params -> param_list','params',1,'p_params_2','pycparser.py',102),
  ('param_list -> param','param_list',1,'p_param_list_1','pycparser.py',107),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_2','pycparser.py',114),
  ('param -> type ID','param',2,'p_param_1','pycparser.py',127),
  ('param -> type TIMES ID','param',3,'p_param_2','pycparser.py',133),
  ('genstmt -> mstmt','genstmt',1,'p_general_statement','pycparser.py',144),
  ('genstmt -> umstmt','genstmt',1,'p_general_statement','pycparser.py',145),
  ('mstmt -> IF LPAREN expr RPAREN mstmt ELSE mstmt','mstmt',7,'p_matched_statement','pycparser.py',150),
  ('mstmt -> stmt','mstmt',1,'p_matched_statement','pycparser.py',151),
  ('umstmt -> IF LPAREN expr RPAREN genstmt','umstmt',5,'p_unmatched_statement','pycparser.py',159),
  ('umstmt -> IF LPAREN expr RPAREN mstmt ELSE umstmt','umstmt',7,'p_unmatched_statement','pycparser.py',160),
  ('stmt -> expr SEMICOLON','stmt',2,'p_statement','pycparser.py',177),
  ('stmt -> declaration SEMICOLON','stmt',2,'p_statement','pycparser.py',178),
  ('stmt -> stmt_block','stmt',1,'p_statement','pycparser.py',179),
  ('stmt -> stmt_forloop','stmt',1,'p_statement','pycparser.py',180),
  ('stmt -> stmt_return','stmt',1,'p_statement','pycparser.py',181),
  ('stmt -> SEMICOLON','stmt',1,'p_statement','pycparser.py',182),
  ('stmt -> expr error','stmt',2,'p_statement_error_1','pycparser.py',194),
  ('stmt -> PRINT LPAREN argument_list RPAREN SEMICOLON','stmt',5,'p_stmt_printf','pycparser.py',207),
  ('declaration -> declaration COMMA idbracket','declaration',3,'p_declaration_1','pycparser.py',242),
  ('declaration -> declaration COMMA TIMES idbracket','declaration',4,'p_declaration_2','pycparser.py',257),
  ('declaration -> type idbracket','declaration',2,'p_declaration_3','pycparser.py',273),
  ('declaration -> type TIMES idbracket','declaration',3,'p_declaration_4','pycparser.py',290),
  ('idbracket -> ID','idbracket',1,'p_id_bracket_1','pycparser.py',312),
  ('idbracket -> ID LBRACKET INUM RBRACKET','idbracket',4,'p_id_bracket_2','pycparser.py',317),
  ('type -> INT','type',1,'p_type','pycparser.py',324),
  ('type -> FLOAT','type',1,'p_type','pycparser.py',325),
  ('type -> VOID','type',1,'p_type','pycparser.py',326),
  ('stmt_block -> LBRACE stmt_list RBRACE','stmt_block',3,'p_stmt_block','pycparser.py',337),
  ('stmt_list -> stmt_list genstmt','stmt_list',2,'p_stmt_list_1','pycparser.py',349),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list_2','pycparser.py',356),
  ('stmt_forloop -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt','stmt_forloop',9,'p_forloop','pycparser.py',365),
  ('stmt_return -> RETURN expr SEMICOLON','stmt_return',3,'p_return_stmt_1','pycparser.py',379),
  ('stmt_return -> RETURN SEMICOLON','stmt_return',2,'p_return_stmt_2','pycparser.py',386),
  ('expr -> ID EQUAL expr','expr',3,'p_expr_assign_1','pycparser.py',401),
  ('expr -> ID LBRACKET arith_expr RBRACKET EQUAL expr','expr',6,'p_expr_assign_2','pycparser.py',409),
  ('expr -> TIMES ID EQUAL expr','expr',4,'p_expr_assign_3','pycparser.py',414),
  ('expr -> incr_expr','expr',1,'p_expr_incr','pycparser.py',419),
  ('expr -> basic_expr','expr',1,'p_expr_basic','pycparser.py',426),
  ('basic_expr -> basic_expr compare arith_expr','basic_expr',3,'p_basic_expr_compare','pycparser.py',432),
  ('basic_expr -> arith_expr','basic_expr',1,'p_basic_expr_arith_expr','pycparser.py',447),
  ('compare -> EQ','compare',1,'p_compare','pycparser.py',453),
  ('compare -> NEQ','compare',1,'p_compare','pycparser.py',454),
  ('compare -> GT','compare',1,'p_compare','pycparser.py',455),
  ('compare -> LT','compare',1,'p_compare','pycparser.py',456),
  ('incr_expr -> ID INCREMENT','incr_expr',2,'p_incr_expr_1','pycparser.py',465),
  ('incr_expr -> INCREMENT ID','incr_expr',2,'p_incr_expr_2','pycparser.py',475),
  ('arith_expr -> MINUS arith_expr','arith_expr',2,'p_arith_uminus','pycparser.py',489),
  ('arith_expr -> LPAREN arith_expr RPAREN','arith_expr',3,'p_arith_parens','pycparser.py',496),
  ('arith_expr -> arith_expr PLUS arith_expr','arith_expr',3,'p_arith_add','pycparser.py',508),
  ('arith_expr -> arith_expr MINUS arith_expr','arith_expr',3,'p_arith_sub','pycparser.py',518),
  ('arith_expr -> arith_expr TIMES arith_expr','arith_expr',3,'p_arith_mult','pycparser.py',527),
  ('arith_expr -> arith_expr DIV arith_expr','arith_expr',3,'p_arith_div','pycparser.py',536),
  ('arith_expr -> ID','arith_expr',1,'p_arith_id','pycparser.py',550),
  ('arith_expr -> FNUM','arith_expr',1,'p_arith_fnum','pycparser.py',559),
  ('arith_expr -> INUM','arith_expr',1,'p_arith_inum','pycparser.py',567),
  ('arith_expr -> TIMES ID','arith_expr',2,'p_arith_pointer_1','pycparser.py',576),
  ('arith_expr -> TIMES LPAREN arith_expr RPAREN','arith_expr',4,'p_arith_pointer_2','pycparser.py',581),
  ('arith_expr -> TIMES ID LPAREN argument_list RPAREN','arith_expr',5,'p_arith_pointer_3','pycparser.py',588),
  ('arith_expr -> ADDRESS ID','arith_expr',2,'p_arith_address','pycparser.py',594),
  ('arith_expr -> ID LBRACKET arith_expr RBRACKET','arith_expr',4,'p_arith_array_index','pycparser.py',599),
  ('arith_expr -> TIMES ID LBRACKET arith_expr RBRACKET','arith_expr',5,'p_arith_pointer_array','pycparser.py',605),
  ('arith_expr -> ID LPAREN argument_list RPAREN','arith_expr',4,'p_arith_functioncall','pycparser.py',610),
  ('argument_list -> argument','argument_list',1,'p_argument_list_1','pycparser.py',628),
  ('argument_list -> argument_list COMMA argument','argument_list',3,'p_argument_list_2','pycparser.py',635),
  ('argument -> empty','argument',1,'p_argument_1','pycparser.py',641),
  ('argument -> arith_expr','argument',1,'p_argument_2','pycparser.py',646),
  ('argument -> LITERAL','argument',1,'p_argument_3','pycparser.py',652),
  ('argument -> error','argument',1,'p_argument_error','pycparser.py',658),
  ('empty -> <empty>','empty',0,'p_empty','pycparser.py',664),
]
